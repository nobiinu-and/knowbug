
	knowbug (ver: 1.0β17)

＠概要

上大が拡張した HSP デバッグ・ウィンドウです。

変数データ表示機能を重点的に拡張しており、標準では表示できない、
	・多次元配列の2,3次元目
	・モジュール変数のメンバ
	・実行中のユーザ定義関数の実引数
などを見ることができます。

他にも、int の16進数併記など、地味に便利な部分も。

＠導入方法
−knowbug

まず、HSPのフォルダ(*)にある「hsp3debug.dll」をバックアップします。
ファイルの名前を変更し、「hsp3debug_default.dll」などにするのがよいでしょう。

次に、同梱されている「hsp3debug_knowbug.dll」の名前を「hsp3debug.dll」に変え、
先ほどの(HSPの)フォルダにコピーします。

*「HSPのフォルダ」
	HSPがインストールされているフォルダで、「common」フォルダの1つ上です。
	通常は「C:/Program Files/hsp34」です。数字は変わるかもしれません。

−WrapCall

※ WrapCall は一部機能にのみ使用するので、無くても問題ありません。

HSPのフォルダに同梱されている「WrapCall.as」と「userdef.as」を common フォルダに移動します。
(既に userdef.as を使っている方は、上書きではなく追記してください。)

なお、WrapCall は hgimg3 などの拡張ランタイムと併用することができません。
(拡張ランタイムを使用する場合は、WrapCall.as を #include しないでください。)
ご了承ください。

−設定ファイル「knowbug.ini」

特に重要でもないので、削除していただいて構いません。
存在しない場合、既定の設定を用いて、正常に動作します。

具体的な設定については、設定ファイルのコメントを参照してください。

＠除去方法

「＠導入方法」と逆の操作をします。

knowbug (ファイル名 hsp3debug.dll) を削除し、バックアップしておいた、元々の
hsp3debug.dll を、元に戻します。

「knowbug.ini」「WrapCall.as」は不要なので削除します。
なおレジストリなどに記録は残していません。

＠機能詳細
＊「全般」タブ

内容は本家とだいたい同じです (ランタイムから供給されるもの)。
win32gui版では、カレント・ポジション (pos) とカレント色 (color) も表示します。

＊「変数」タブ

本家版とはレイアウトが異なり、画面を上下に二分して、上にツリービューが、下に
灰色メッセージボックスがあります。後者は、本家版と同じ働きです。

ツリーには、すべての静的変数の名前を、モジュールごとに分類して並べています。
この項目を選択すると、下のボックスに、変数の内容 (変数情報) が表示されます。

変数情報は、ツリー形式の文字列で表されます。基本的に本家と同じですが、配列や
インスタンスは、特別な方法で表示します。凡例は以下の通り：
	
	(単体: 一次元一要素)
	要素名 = 値
	
	(一次元配列)
	要素名:
		.type = 型名[&] (要素数)
		要素リスト
	
	(多次元配列)
	要素名:
		.type = 型名[&] (要素数(1), ...) (全要素数 in total)
		要素リスト
	
	(インスタンス)
	要素名:
		.modcls = モジュール名[&]
		要素リスト

ここで、配列変数の型名についている「&」は、その変数がクローン変数(dup や
dupptr によって作られるもの)であることを示します。
また、インスタンスのモジュール名の後についている「&」は、そのインスタンスが、
他のインスタンスへの参照であることを示します。

モジュール名のノード(「@...」)自体を選択すると、そのモジュールが持つすべての
静的変数の値を、簡単に表示します。

	(モジュール)
	[@モジュール名]
	変数名	= 値
	...

＃＃

ルートに位置する「+sysvar」ノードの直下には、システム変数の項が存在します。

cnt は配列のように表示されます。第一項に相当するものが一番外側のループの cnt です。repeat ループの外であるときは、(out_of_loop) と表示されます。
メモリダンプ範囲は HSPCTX::mem_loop[1〜looplev] となっています。

(例)
	cnt:
		#n = 1
		#(n-1) = 2
		...
		#1 = 0
	なお n = looplev となります。

notebuf はシステム変数ではありませんが、最後に notepad_sel で指定された (まだ notepad_unsel されていない) バッファを表示します。

「+sysvar」ノード自体を選択すると、すべてのシステム変数の値が簡単に表示されます。

＃＃

WrapCall 対応版を使用している場合、ルートに「+dynamic」ノードが存在します。
この直下には、呼び出されているユーザ定義命令・関数のリストがあります。
それらを選択すると、以下の形式で、実引数を表示します：

	関数名：命令または関数の名前
	仮引数：(仮引数タイプ, ...)
	
	関数名:
		(0) = 第一引数の値
		(1) = 第ニ引数の値
		...

「(N)」は、N番目の仮引数を表します。仮引数の名前が表示されるかもしれません。
#modfunc, #modcfunc の最初の引数の名前は「thismod」と表示されます。

ユーザ定義命令・関数が実行されてすぐにノードが追加されますが、実引数をその
後にを計算してから、命令・関数の本体の実行が始まります。
その間、実引数の内容は表示できないため、次のように表示されます。

	関数名：(同様)
	仮引数：(同様)
	
	関数名:
		arguments : (not_available)
	
また、本体の実行が始まった後も、実引数データにアクセスできない場合があり、
その際もこの表示になります。
(例えば、newmod 命令により #modinit が実行されている間など)

＃＃

なお、本家版にあるチェックボックス (ソート, モジュール, 配列, メモリダンプ)
は、すべて on の状態です。

−変数情報

変数名: 
	変数の名前です。モジュールの中にある変数も、完全な名前で表示します。
変数型: 
	変数の型を次の形式で表します。
		<vt><tq> <index>
	<vt> は変数の型の名前です。
	<tq> は変数のモードを表します。通常は空("")です。
		変数が(dup などによる)いわゆるクローン変数のとき「&」と表示されます。
		変数が無効な状態のとき、「!」と表示されます。
	<index> は配列の形を表します。
		1次元配列の場合、「(x)」です。(x はその要素数)
		2次元配列の場合、「(x, y) (N in total)」と表示されます。
			x, y はそれぞれ1,2次元目の要素数で、N は配列全体の要素数です。
		3,4次元配列の場合は、2次元配列と同様です。
	表示例：「int (2, 3) (6 in total)」
アドレス:
	2つの8桁の16進数で表します。
	前者は、変数の実体データがあるメモリのアドレスで、
	後者は、変数のマスターデータがあるメモリのアドレスです。
	@ PVal::pt, PVal::master のこと。
サイズ:
	"using X of Y [byte]" の形式で表します。
	Y は実体データが「確保」しているメモリサイズ [byte] で、
	X はそのうち、使用している部分のサイズです。
	なお変数の型によっては X, Y がそれぞれ別の領域の大きさを指すことがあり、
	X > Y となることもありえます。
	
＊「ログ」タブ

フォント："ＭＳ ゴシック", 9[pt]

自動更新チェックボックス：
	これを外すと、logmes 命令が実行されても、一時的にログが更新されません。
	@ 更新はかなり時間の掛かる処理です。たくさんの出力がある場合は、これを
		off にした方が高速になります。
	
呼出履歴チェックボックス：
	これを付けると、ユーザ定義命令・関数の呼び出しと終了が logmes されます。
	WrapCall が必要です。
	
「更新」ボタン：
	ログを最新の状態に更新します。
	
「保存」ボタン：
	ログをファイルに保存します。
	(ファイルを指定するダイアログが開きます。)
	なお、設定ファイルを用いて、終了時にログを自動保存するようにできます。
	
「初期化」ボタン：
	ログを初期化します。
	
＊実行制御

通常の「実行」「次行」「停止」ボタンの横に、加えて「次飛」「脱出」ボタンが
追加されています。

「実行」(Run)：
	assert 命令などで停止していた実行を再開します。
	
「次行」(Step In)：
	次の命令を1つ実行して、再び停止します。
	
「停止」(Stop)：
	実行を停止します。
	
「次飛」(Step Over)：
	「次行」と同様に次の命令を実行しますが、それがユーザ定義命令・関数である
	場合は、その内部の実行が終了してから停止します。
	
	(例)
		// ユーザ定義命令 test1, test2 があるとして
		assert
		test1	// ←今ここ！ (assert で停止した)
		test2
		
		ここで「次飛」を使うと、
		
		test1	// test1 の実行が完了する
		test2	// ←今ここ！ (test2 の実行直前で停止する)
		
		となる。
	
	※これを押した後、マウスを動かすなどして、デバッグウィンドウにメッセージ
	　を送らないと実行位置の表示が更新されません。(既知の不具合)
	
	@ 「次行」→「脱出」に等しい。
	@ なお、「次飛」では分かりづらいので、別案を募集しています。
	
「脱出」(Step Out)：
	次の return まで実行します。ユーザ定義命令・関数の定義の中で使用すると、
	その命令が終了するところまで実行します。
	(例)
		test1
		mes "hello"
		
		#deffunc test1
			assert
			mes "process"	// ←今ここ！ (assert で停止した)
			a = 1
			test2
			return
			
		ここで「脱出」を使うと、
		
		test1			// test1 の実行が完了する
		mes "hello"		// ←今ここ！
		
		となる。
		
	※「次飛」と同様のバグが存在します。

＠環境

OS : Windows 7 HomeEdition
IDE: Visual C++ 2013 Express Edition SP1
Lang: C++

＠動作環境

HSP3.4β4 以降
OS: Windows 7

これら以外では、動作を確認していません。サポートできない可能性も高いのでご了承ください。

＠著作権

knowbug は、公式のデバッガ hsp3debug.dll に、上大が手を加えたものです。

本ソフトの半分程度は、OpenHSP にあるコード、およびリソースを使用しています。
	(/trunk/tools/win32/hsp3debug/*)

その著作権表示は、以下の通りです：
	Copyright (C) 1997-2011, Onion Software/onitama.
	All rights reserved.
また、Lisense フォルダの中身も参考にしてください。

＠ソースコード

上大が作成した部分は、ご自由にお使いください。
他は、ライセンスに従ってください。

※不整合や欠落などありましたらご連絡ください。

＠参照
−プログラ広場

[http://prograpark.ninja-web.net/]
上大とかーみのサイトです。バグ報告、意見、感想、要望などは、ここの掲示板
までお願いします。また、最新版は、ここの「たまり場」にあります。

−HSPTV!

[http://hsp.tv/]
HSPの公式サイトです。

−OpenHSP

[http://dev.onionsoft.net/trac/]
プロジェクト OpenHSP のリポジトリがあるサイトです。
HSPはここで開発されています。

＠既知の不具合
−原因不明なもの

・条件付きステップ実行が、WindowMessageを送らないと動かない。原因不明。
・ステップ実行のときに [×] で onexit の実行に移動し、再び [×] を押すと
	ランタイムエラーが起きる。原因不明。
・たまに、ソース小窓の更新時にポーンと音が鳴る。新しい行のソースが(上書きではなく)追記される。

−直せないもの

・スクリプトやプラグインが ctx->prmstack を変更した場合、WrapCall がアクセス違反を犯す可能性が高い。
	特に、call.hpi とは共存できない。
・@ から始まる名前の静的変数の変数情報を取得しようとすると、システムエラーで落ちる。
・「Debug Window を表示しない」の状態で実行すると、終了時にランタイムエラーが起こる。
	また、その状態で WrapCall を使いユーザ定義コマンドを呼ぶと、システムエラーで落ちる。

--------------------------------------------------------------------------------
＠メモ
−その他

・32bit 環境でのみ動作確認 (新版)。
・デバッグ文字列の生成を HspVarProc に任せると、ランタイム側がデバッグ時に使用できるという利点がある。
	リリース版にデバッグ用コードが含まれるという問題がある。
・Release::Build Event::Post Build
	Command Line:
		copy $(TargetPath) ..\..\..\hsp3\win32\release\
		copy $(TargetPath) ..\..\..\hsp3\win32gui\release\
・constexpr: VC++ の対応状況が微妙なので不使用。
・name という変数が、ノードの文字列なのか、変数やシステム変数の名前なのかが曖昧。
・コピペプログラミングやめろ
・ユーザ定義関数が入れ子になっている(ユーザ定義関数の引数式にユーザ定義関数が含まれる)とき：
	A( B() ):
		-reffunc_custom(A)
			-ラッパー処理：OnBeginCalling(A)
				Aのノードが追加される
			-引数を取り出す：スタックに領域を積み、expandstructを呼ぶ。
				-reffunc_custom(B)
					-ラッパー処理：OnBeginCalling(B)
						Bのノードを追加する
					-引数を取り出す
						Bの引数が処理される
					-prmstack, sublev を書き換え、移動する。
						Bの実行を行う。
						returnする
					-prmstack, sublev を戻す。
					-終了
					-ラッパー処理：OnEndCalling(B)
						Bのノードを削除する
			-prmstack, sublev を書き換え、移動する。
				Aの実行を行う。
				returnする
			-prmstack, sublev を戻す。
			-終了
			-ラッパー処理：OnEndCalling(A)
				Aのノードを削除する
	A, B の順でノードが積まれているとき、A( B() ) なのか、A() の実行中に B() が生じたのか判断する必要がある。複数の入れ子 A( B(), C() ) は特に考慮する必要はない。
	入れ子状態の場合、prmstack, sublev に変更が生じるのは、B() の実行の後、つまり危険な観測の前である。
	呼び出し A の引数にアクセス可能であるための条件は：
		0. A が最後のノードである。
			引数式にユーザ定義関数 B() が存在しないならば、A の引数の処理中に assert などで停止するタイミングは存在しない。
	または
		1. A.sublev < B.sublev  (X.sublev: X の処理直前の sublev)
			入れ子状態のときは A.sublev == B.sublev となる。
	となる。
	ついでに、呼び出し A の prmstack は、A がアクセス可能ならば
		A が最後のノードなら ctx->prmstack
		そうでなければ次のノード B の B.prmstk
	そうでなければ存在しない。
	# ややこしく考えすぎた結果がこれだよ！
・理想的に言えば
	_ = A( B( C(), D() ), E() ) という呼び出しは、A の実行が開始した時点で
	+dynamic
		'A
			"B
				"C
				"D
			"E
	(' : 呼び出しノード、" : 返値ノード)
	となっているべきかもしれない。
・特定の文字列(例えば"__")から始まる変数やモジュールをツリービューに表示しない設定
・ログなどのフォントの ini での指定
	フォントオブジェクトめんどくさい。
・変数の値の書き換え
	str, double, int の定数に限る
	struct, prmstack の内部にも侵入したい
		どうやって対象を選択するか？
	専用の Editor ダイアログを制作する？→めんどくさい
・返値ノードの情報量がやや少ない気がするが、これの情報量を増やすのは実行速度への影響が大きいのでためらいがある。
・OverviewFormedWriter という手？
・callog きいてない？
・拡張型の表示で、拡張型の hpi 自体から関数をロードするという指定方法があってもいいかも。
	→ 拡張型がどのプラグインから提供されているかは判断できない。

−Wishlist

・array[str]型の要素ごとメモリダンプ
・変数やログの文字列の縦断検索。
・ウィンドウサイズを可変にしたい。
・命名規則の統一
・#modinit, #modterm の発生、終了をスクリプト側から指定する。

＠履歴

−2014/09/07

・CIni に enumSection, enumKeys を追加した。
・変数ツリービューをカスタムドローする際に、システム変数を型に応じて色分けするようにし、呼び出しノードを命令か関数かで色分けできるようにした。
	また、選択状態のノードは色分けしないようにした。(見づらくなるので)
・EditControl の更新時に、スクロールバーの行の位置を保存するようにした。
	変数の内容が大幅に変更された場合などはうっとうしいかもしれないが。
・拡張型の変数や値を、外部Dllが作れるようにした。その型のHPI自身でなくてもいい。
	そのためにいくつかの関数を公開している。(ExVardataString.(h/cpp))
・拙作プラグイン assoc, vector, (array), modcmd の拡張表示をメインの部分から取り除き、前述の外部 Dll の呼び出しの部分に knowbug (hsp3debug.dll) が持つ関数ポインタを使うことで対応するようにした。
	assoc, vector はデータを整形して knowbug に送信するという手間をしなくてよくなったが、後方互換性のためにとりあえず残しておく。
・notebuf に静的変数が指定されていたなら、名前を表示するようにした。
・リリース (ver: 1.0β17)。
	要約：
		スクリプト向けAPIの追加 (2つ)
		カスタムドローの自由度の増加
		プラグイン拡張型の文字列表示を外部化
		いくつかのバグ修正、および機能していない機能の削除

−2014/09/06

・WrapCall：typeinfo の配列が sbExpand されて移動することに今更気づく。
	つまり TYPE_MODCMD の typeinfo にアクセスできるのは、WrapCall プラグインが初期化されたときに限られ、かつ、終了時に cmdfunc, reffunc を restore することができない。
・再リリース (ver: 1.0β16)。
・非依存な返値ノードが追加されていなかったバグを修正した。
	直前の呼び出しに必ず依存していることになってしまっていた。
・返値ノードデータの管理を分かりやすくした。
・CVarinfoTree, CVarinfoLine を合わせて、CVardataString にした。
	妙な分岐がたくさん残っている。
	いわゆる Template Method Pattern。仮想関数による多態を使うので遅い。
	文字列バッファ(string)と文字列バッファへの書き込みを行う関数群を持つクラス(CStrWriter)を分離することで、他の Writer の利用をしやすくした。
・そのバッファの委譲により、概観(Overview)系を CVarinfoText に移しやすくなった。
	項目ごとにバッファを確保する動きは厳しい。
	ただし項目ごとに new CLineformedWriter しているので未だ厳しい。
・変数情報の文字列の長さ制限を設定できないようになった。
	上の更新の弊害。対応できるとは思う。
・変数データの文字列のネストレベルが一定量(64)を超えたら、それより深い入れ子データを無視するようにした。
	無限ループ対策。
・EditControl の「右端で折り返す」設定が機能していないことに気づいたので、設定項目から取り除いた。
	そのスタイルはコントロールの作成時にしか効果がないらしい。つまりソース側からコントロールを生成するようにすれば問題ない……が、フォントを作るのがめんどくさすぎて諦めた。

−2014/09/05

・システム変数のダンプ情報をなぜか CVarinfoTree::addSysvar が生成していたので、別の関数に分けた。
・ツリー状文字列の生成において、「名前」を引数で持ち運ぶようにした。
・スクリプト向けのAPI knowbug_getVarinfoString, knowbug_getCurrentModcmdName を追加した。

−2014/09/02

・g_stkCallInfo に ModcmdCallInfo の実体を保持させるのをやめて、それぞれの実体を所有するスマポの配列にした。
	std::make_unique では struct をメンバ列 {...} で初期化できないのね。
・g_stkCallInfo を非公開にし、at と range のみ公開した。必要なら他のも公開するが。
・スクリプトエディタから編集中かつ未保存のファイルを実行するとき、
	ソース小窓に表示する文字列を取得しようとして存在しない行番号を参照し範囲外エラーを生じていたバグを修正した。

−2014.08/29

・リリース (ver: 1.0β16)
	要約：ソースコードを整理しただけ。

−2014.08/26

・vartree の中で文字列生成をしている部分を CVarinfoTree/Line に入れた。
	システム変数一覧やモジュールの一覧などの **Overview 系。
	WrapCall との結合度が上がった。
・ツリー状文字列および一行文字列において、モジュール実体がクローンであることの表示方法を変更した。
	旧：「.clone」と表示していた。一行文字列では特になし。
	新：モジュールクラス名の後ろに & を付けるようにした。
・要素数 0 の配列変数を特別扱いしないようにした。
・一行文字列で、モジュール実体のメンバは ( ) ではなく { } で括るようにした。
	assoc のメンバを { } ではなく [ ] で括るようにした。
	また、括弧の内側に空白を入れないようにした。
・仮引数を表す文字列を map と join で作るようにした。また無意味な。

−2014.08/22

・ResultNodeData を VarTree 側が管理するようにした。
・(モジュールノードなどで見られる)一行表示において、
	すべての文字がエスケープされて長さが2倍になるような文字列を表示するときに
	バッファオーバーフローが起きていたバグを修正した。
	例："""
・変数情報のモードの表示方法を変更した。
	旧：「モード：無効/実体/クローン/その他」
	新：「変数型：type<tq> (...)」
		<tq> は、モードが実体なら空、無効なら「!」、クローンなら「&」、その他なら「<err>」。
・ツリー状文字列で、配列の型(.type)も上と同様にしてモードを表示するようにした。
	関数を共有したかっただけ。
・getDbgString が2か所、getMPTypeString が3か所にあったのをまとめた。
	getMPTypeString が1か所でしか使われていないのには驚いた。
・静的変数ツリー CVarTree の実装をリファクタリングした。
	モジュール名は常に先頭に @ を冠することにして分かりやすく、かつソートがうまくいくようにした。
	なぜか自作反復子を実装し使っていたバグを修正した。
・変数ツリービューにおいて、モジュール・ノードの詳細を文字列表示するために、
	その直下のモジュールと変数を列挙するために、
	変数ツリービューではなく、CVarTree から子リストを得るようにした。
・システム変数 iparam, wparam, lparam を3つ組扱いしていたのをやめた。
・システム変数の順番で、notebuf を末尾にした。
・モジュールノード、+sysvar、+dynamic の一行表示の文字列を
	vartree ではなく、CVarinfoLine が作るようにした。

−2014.08/21

・VarinfoTree/VarinfoLine が CStrBuf を使うようにした。
・呼び出しノードの LPARAM を ModcmdCallInfo* ではなく、それの g_stkCallInfo における添字にした。
	おそらく、vector の実体が移動してしまうことによってリンク切れが起きる可能性があった。
・ツリー状文字列で、配列の型の表示方法を、変数情報の場合と同じにした。
	旧表示 (一次元配列)：
		.vartype = 変数型
		.length  = 要素数
	旧表示 (多次元配列)：
		.vartype = 変数型
		.format  = (要素数1, 要素数2, ...) (全要素数 in total)
	新表示：
		.type = 変数型 (要素数1, ...) (全要素数 in total)

−2014.08/20

・HSP3EXINFO::er を使用しないようにした。
	HSP2.x 系のプラグインがかつて使用していたメンバなので、障害を起こしていた。
・再リリース。
・WrapCall を統合した。
・返値ノードの値を取得するために黒魔術ではなく正規の方法を取るようにした。
	WrapCall 自体が黒魔術なのであまり意味ないかもしれない。

−2014.04/27

・開発環境を VC++ 2013 Express SP1 にアップデートした。
・HSP3.4β4 から、ラベル名と引数名がデバッグ情報として与えられるようになったことを受けて更新。
	引数やメンバ変数の項を、可能なら名前を表示するようにした。
	ラベルの値として、可能ならラベル名を表示するようにした。
	なお、同じ位置を指す異なる複数の名前のラベルが登録されている場合、その1つ目を表示する。
	未確認だが、HSPのバージョンが古くてもいちおう動くはず。
・一応、配列の4次元目まで表示できるようにした。
・変数型の表示で、存在しない次元は 0 ではなく省略して表示するようにした。
	つまり2次元配列は int (a, b, 0) だったのが int (a, b) になった。
・リリース (ver:1.0β15)。

−2014.02/16

・var_modcmd.hpi と連携した。
	modcmd_k 型の値は、それが指示しているコマンドの名前を表示する。
・var_modcmd.hpi と同時リリース (ver: 1.0β14)。

−2014.02/14

・modptr.as と連携した。
	modptr 値を表示する代わりに、それが指示しているインスタンスの情報を表示する。
	modptr.as の仕様により、死んだポインタでも問題なく表示できる (はず)。
・modptr.as と同時リリース (ver: 1.0β13)

−2012.12/02

・EXPORTした関数を呼び出される形でスクリプトと連携するようにした。
・main.cpp が非常に肥えたので、main, vartree, dialog の3つに分解した。

−2012.12/01

・スクリプトタブとスクリプト小窓(実行中の行を表示)を両方使用するようにした。
	@ 後者は「全般」タブに入る。

−2012.11/30

・ある特定の変数が静的変数として存在していた場合、knowbug の開始時に、
	それに knowbug のウィンドウハンドルを格納するようにした。
	これにより連繋が取れるようになった。
・↑をもとに、knowbug と連携するための knowbug モジュールを作った。
	構造体パラメータに識別子を与える機能を実装した。
	@ ついでに、メンバ命令・関数の第一引数を thismod と表示されるようにした。
・実行位置情報から、ファイルを読み込んで実行している行を表示するようにした。
	@ 小窓を作って一行だけ表示するか、タブを1つ追加してスクリプト全文を表示するべきか。
	@ オプションで選べたらいいんじゃね？

−2012.11/29

・呼び出し関連のツリービューノードを実行中に追加したり除去したりしない、
	という条件を間違えていたバグを修正した。
	@ 「「次飛」「脱出」はステップ実行として扱わない。」というのを忘れていた。
・最新の呼び出しが生じた場所より現在の sublev が2以上深い場合、つまり、
	それの実行後に他のサブルーチン呼び出しが起こっている場合には、
	ctx->prmstack を参照しないようにした。
	@ gosub ならいいが、他の呼び出しによって prmstack が置き換えられていたら
	@	不正なメモリアクセスになりかねないため。
	@	例えば ctor/dtor/onexit の呼び出しは捕捉できないので要注意である。
・呼び出しノードで、呼び出された位置(ファイル名、行番号)を表示するようにした。

−2012.09/13

・リリース (ver: 1.0β12)

−2012.09/12

・返値ノードの機能を使うか否かを設定できるようにした。
・runmode でステップ実行中か否かを判断することができないことが判明した。
	どちらにせよ OnBgnCalling, OnEndCalling を通るときの runmode は
	RUNMODE_RUN | RUNMODE_RETURN である。
	なので、ステップ実行中か否かを示すグローバル変数 stt_bStepRunning を用いるようにした。
	@ ステップ実行中でなければ、呼び出しノードを変更しない、という仕様に使う。
	@	そのため、「次飛」「脱出」はステップ実行として扱わない。
・返値ノードを呼び出しノードの下に追加するに際し、その呼び出しがそれに引数として依存していない場合、その下にあるすべての返値ノードを削除してから追加するようにした。
	@ 大量に溜まってしまうので。
	@ 上のバグに気づいていなかったので戸惑った。
	@	呼び出し終了後に追加しようとすると、依存していないと判定されるため。

−2012.09/11

・ツリー上の呼び出しノードに対して「脱出」操作をできるようにした。
	似たようなものなので「次飛」は実装していない。
・終了時に、呼び出しノードを選択していると正常に終了できないバグを修正した。
	終了時に呼び出しノードを削除しないようにした。
	@ 削除する必要はなかったので。
	@ 「選択している呼び出しノードを削除する場合、その上を選択する」仕様に
	@	関連しているようだが、しかしなぜ正常に終了できないのかは不明。

−2012.09/10

・ユーザ定義関数の引数の中でユーザ定義関数が呼び出されていたときに、
	前者の引数が展開され終わる前に前者の prmstack (存在しない) に
	アクセスしようとして、間違った prmstack を参照していたバグを修正した。
・WrapCall:
	・ModcmdCallInfo を双方向リストにした。
		元々 ModcmdCallInfo の作成・破棄は WrapCall の担当なので、
		prev, next も WrapCall 側で設定される。
	・返値が返却されたときに通知 ResultReturning を送るようにした。
		その呼び出しの OnEndCalling 通知の直前に送られる。
	・終了時に、ModcmdCallInfo をすべて破棄するようにした。
		途中で終了したとき、それらを delete することなく終了していた可能性。
		たまに死亡していたのはこのせい？
・ユーザ定義コマンドが返値を返したときに、返値ノードを生み出すことにした。
	通常、直前の呼び出しの子ノードとして追加される。
		その親の呼び出しが終了した時に削除される。
	最初の呼び出しの返値は、+dynamic の直下に置かれる。
		これは、その次に生じた呼び出しが返値を返したときに削除される。
・終了時に、すべての返値ノードを削除するようにした。
	関連している ResultNodeData を破棄するため。
・OnResultReturning ではなく、OnEndCalling に処理するようにした。
	ノードを削除した後に返値ノードを生成する。
	実行モード RUN | RETURN の場合は即座に追加し、そうでなければ溜める。
	この場合、関数だけでなく、命令が返値を返却した場合も処理される。
・呼び出し開始または終了時(OnBgnCalling, OnEndCalling)に、実行モードが
	RUNMODE_RETURN である可能性を見落としていたバグを修正した。
	@ 終了時に RUNMODE_RUN であることはなさそう。

−2012.09/09

・ログの最大文字量を設定できるようにした。
	エディットコントロール本来の既定値は 0x8000 、設定の既定値は 0x20000 。
・エディットコントロールを右端で折り返すか否かを設定で変更できるようにした。
・array 引数の文字列化に失敗していたバグを修正した。
・リリース (ver: 1.0β11)

−2012.09/08

・破棄されたかもしれない一時オブジェクトを参照していたバグを修正した。

−2012.09/07

・ログに「更新」「保存」「初期化」機能を追加した。
・変数情報をログに書き込めるようにした。
・ファイルパスを設定すると、終了時に自動的にログを保存するようにした。
・値や変数を一行に文字列化する CVarinfoLine を実装した。
	@ CVarinfoTree を“元にしている”。
	@ 悪魔と契約した。
・変数ツリーの、モジュールや +dynamic, +sysvar での簡易表示に対応した。
	@ 各子ノードの値を一行に文字列化して表示する。
・var 引数を array 引数として処理していたバグを修正した。
	@ 追記(09/09)：修正が中途半端だったのを再修生した。

−2012.08/10

・開発環境、動作環境を Windows 7 に変更した。
	@ XP に限り、重篤なバグがある場合は対応するかもしれない。
・拡張プラグインによって提供されうる基本型の表示に対応した。
	C++に存在する型をベースにしていると予想して処理する。
		bool,
		 char  = signed_char, 
		uchar  = unsigned_char,
		 short = signed_short,
		ushort = unsigned_short,
		uint   = unsigned_int,
	
−2012.05/27

・WrapCall:
	ユーザ定義命令の返値(RUNMODE)を、knowbug が返却したものにするようにした (ただし未使用)。
・「実行」ボタンの幅を小さく(他のボタンと同じに)した。
	@ 何故2倍の大きさを持っていたのか分からない。
・「次飛」「脱出」ボタンを追加した。
	特定の sublev に達するまで「次行」(HSPDEBUG_STEPIN)の処理を繰り返すことで実装した。
	この2つは、その sublev の値の違いしかない (脱出は現在値 ctx->sublev の1つ上に設定される)。
	@ これらを押した後、マウスを動かすなどしてデバッグウィンドウにメッセージを送らないと、
	@	実行位置の表示が更新されないバグが残っている。原因が分からないが、致命的ではないのでとりあえず放置した。
・リリース (ver: 1.0β8)。
	バージョン番号情報を書き換え忘れた。

−2012.01/22

・ini の論理値に文字列 "true", "false" を指定できるようにした。
	@ 大文字・小文字を問わない
	@ 従来通り 0, 非0 でもよい。
・ポップアップメニューを表示するようにした。
・最前面ウィンドウに設定できるようにした。
	@ ini の [Window] bTopMost を true にすると既定となる。

−2011.11/16

・呼び出しノードを削除する時、それが選択状態なら、その兄(いなければ親、すなわち"+dynamic")を選択するようにした。
・呼び出しノードは、実行中はツリーノードを追加せずに、assert で停止したときにまとめて追加するようにした。
	@ 削除は行う。
	@ wait による停止でも追加してしまうという問題がある。
	
−2011.09/20

・1024バイト以上の文字列を logmes するとバッファーオーバーフローで落ちるバグを修正した。

−2011.08/21 (Sun)

・モジュールメンバ関数の第一引数が、与えられた変数の要素 [0] を表示していたバグを修正した。

−2011.07.28 (Thu)

・multi → assoc に修正した。
・再リリース (ver: 1.0β7)

−2011.07.21 (Thu)

・WrapCall の仕様変更に対応した。
	ユーザ定義コマンドの呼び出し開始・終了を、ウィンドウメッセージではなく関数ポインタの呼び出しで通知するようになった。
・リリース (ver: 1.0β7)

−2011.07.18 (Mon)

・var_vector.hpi の拡張表示に対応した。

−2011.06.23 (Thu)

・仮想システム変数 notebuf を追加した。notepad 命令群に設定されたバッファを表示する。
・システム変数の値を表す文字列を CVarinfoTree で作成するようにした。

−2011.06/22 (Wed)

・変数情報部分の書式を変更した (http://twitpic.com/5f3ye7)。
・変数データやログの、タブ文字幅を指定できるようにした。
	@ [Interface] tabwidth = 4 (default)
・変数データ文字列の字下げ(indent)を "    " ではなく "\t" でするようにした。
・システム変数 iparam, wparam, lparam を params として1つのページで表示するようにした。

−2011.06/21 (Tue)

・var_multi.hpi の拡張表示に対応した。
・静的でない変数が、要素数1でも単体変数(Scalar)ではなく、配列(Vector)として扱われていた不具合を修正した。

−2011 06/13 (Mon)

・呼び出し終了時に削除するツリーノードが、最後のではなく2番目のノードになっていたバグを修正した。
	for 文で TreeView_GetNextSibling() を複数回使おうとしたが、実際は初期化にしか書いていなかったという酷いミス。
・再リリース (ver: 1.0β5)

−2011 03/29 (Tue)

・WrapCall.hpi との連携に対応。
	+Dynamic ノードで、呼び出されたユーザ定義命令・関数の引数の値を表示できるようにした。
	呼び出し履歴を logmes 出来るようにした。
・リリース (ver: 1.0β5)

−2010 02/07 (Sun), 〃/08 (Mon)

・Visitor パターンを利用した方法に変更しようとしたが、無理だった。
	@ 残骸 → new_knowbug フォルダ
	
−2010 02/06 (Sat)

・「@a@s」と「@b@s」など、領域内に領域があるとき、それらの関係を逆に解釈して
	しまうバグを修正した。
	@ex: 同じ例で：
		-@
			-@a
				-@s
			-@b
				-@s
		正しくは：
		-@				// @
			-@s			// @s
				-@a		// @a@s
				-@b		// @b@s

−2010 01/13 (Wed)

・カスタムドローするかどうかを、ini ファイルで設定できるようにした。
	@ [ColorType]::bCustomDraw キーが真ならカスタムドローする。
・全般タブのリストに要素を追加するコードを、若干すっきりさせた。
・配列の aptr が 0x8000 以上のとき、符号が負に変わって、メモリ違反を起こし、
	異常終了してしまうバグを、hsp モードでのみ修正した。
	@ PVal::offset が signed short 扱いになっていたため。
・hsp モードでは、ちゃんと、 hsp 本来のヘッダを用いるようにした。
	@ ただし、clhsp での定義が複数の場所に散らばってしまう。
	@ 配列の四次元目を表示できるようになったが、需要がなさそうなので変更なし。
・hsp モードで、thismod を、引数に指定された要素だけ表示するようにした。
・リリース (ver: 1.0β4)
	
−2010 01/11 (Mon)

・再コンパイル。

−2010 01/02 (Sat)

・システム変数 err を表示するようにした。
・Vector要素 VecElem を表示する際に、実体要素なら *、参照要素なら & を、
	要素名 ( 通常は [n] ) の後に付けるようにした。
・VecElemが参照要素で、aptr != 0 のとき、その要素の値のみを varScalar として
	取り出すようにした。

−2009 12/19 (Sat)

・Vectorの仕様変更に対応し、再ビルドした。
・変数データツリーが300以上の深さになると、エラーで再帰を終了するようにした。
・変数データツリーが長すぎると ( 0x5000 bytes 以上 )、途中で切るようにした。

−2009 12/18 (Fri)

・iniファイルを、ランタイムと同じフォルダから探すようにした。
	@ スクリプトエディタがカレントディレクトリを変更してしまうため、
		カレントから探すと発見できない可能性が高い。
・カスタムドローで、NM_PREPAINT などの戻り値を、SetWindowLong() を用いて返す
	ようにした。
	@ return では返すことができないため、NM_PREPAINT が発生しなかった。
・変数ツリーで、型ごとに色を変えるようにした。
・(ver: 1.0β3)

−2009 12/17 (Thu)

・ツリービューをカスタムドローするようにしようとした。
・iniファイルからの読み込みができるようにした。

−2009 12/16 (Wed)

・cntを表示するに際し、配列のように、トップレベルではないループの cnt 値も
	表示するようにした。
	「#n」は looplev が n である位置の cnt を表す。最上段がトップ。
・「マルチスレッド Dll (/MD)」から「マルチスレッド (/MT)」に変更した。
	@ Windows XP sp2 以前の環境でも動くようになった。
・リリース (ver: 1.0β2)

−2009 12/15 (Tue)

・Kernel32.dll に EncodePointer() がない環境でエラーが起きるVS2010のバグに
	対応するため、ビルドは VC++2008Ex で行うようにした。
・リリース (ver: 1.0β1)
・バッファサイズは、メモリダンプ時に表示するようにした。
・システム変数を、ツリーの「$sysvar」ノードに持たせるように、追加した。
・ツリーのトップレベルのノードはすべて開いた状態にするようにした。

−2009 12/14 (Mon)

・log-Editboxが更新されても、選択状態を維持するようにした。
・log-Editboxの自動更新を止めるために、自動更新の有無をチェックボックスで
	管理し、自動更新が無効化された状態で TabLogAdd された文字列は、一旦、
	別のバッファに書きためるようにした。
・hsp互換モードでは、配列の添字括弧に [] ではなく () を用いるようにした。
・初リリース (ver: 1.0β0)
	HSPTV! 掲示板で宣伝した：http://hsp.tv/play/pforum.php?mode=pastwch&num=29264

−2009 12/13 (Sun)

・Compile-Switchで、hsp向けのバージョンとして作成できるようにした。
	@ clhsp 限定の機能は、clhsp マクロがないと制御される。
・多次元配列の全要素が表示できるようにした。ただし、諸事情により3次元に限る。
・nullmod を表示するときに、NULL参照エラーが発生していたバグを修正した。
・hsp互換モードで、struct型の内容 (FlexValue) を拡張表示するようにした。
・バージョン情報を埋め込むようにした。
・delmod された後の FlexValue の ptr が NULL になっていない可能性があるのを
	考慮して、type が FLEXVAL_TYPE_NONE でないことも条件にした。
	@ 無効ポインタの参照でエラーが起きていた。
・変数データテキストが 0x2000 バイトより大きければ、malloc で必要なだけ確保
	して対応するようにした。

−2009 12/12 (Sat)

・変数の内容のツリー形式文字列を、関数ではなく CVarinfoTree クラスが生成する
	ようにした。
・マクロ USE_DEFAULT_ARG がないために、STRUCTPRM の大きさがビルド時と違って
	いたバグを修正した。
・modinst のメンバを拡張表示するようにした。
・変数の内容は CVarinfoText クラスを用いて生成するようにした。
・メモリダンプの表示形式を変更した。
	@ 1行に 16 バイト分表示するなど、ddw に似せた。
・変数データテキストを、項目をＷクリックしたり、リターンキー ( [Enter] ) を
	押したりしても更新するようにした。
・logmes されても変数ツリーを構築し直さないようにした。

−2009 12/10 (Thu)

・vector ツリーで、「=」の左辺に「変数名[a][b]...[n]」ではなく「[n]」とだけ
	表示するようにした。
	また、.vartype で型名を表示するようにした。
・vector が空の時の表記を変更した。

−2009 12/09 (Wed)

・HSP3DEBUG::dbg_toString() を追加した。
・変数の内容 (varinf) を、knowbug が処理して表示するようにした。
	@ つまり、HSP3DEBUG::dbg_getvarinf() を呼ばないようになった。
・vectorをツリー形式の文字列で表示するようにした。

−2009 12/07 (Mon)

・別フォルダに移動し、knowbug に改名した。
・静的変数リストを、木構造の CVarTree クラスで管理するようにした。
・「変数」タブのチェックボックスを削除し、「配列」「静的ローカル」
	「メモリダンプ」などを常に行うようにした。
・変数リストをツリービューで表示するようにした。

−2009 12/06 (Sun)

・開発開始。
・EditControl のフォントを「MS UI Gothic」から「ＭＳ ゴシック」に変更した。
・タブのページを、限界まで広く使うようにした。
・初期状態で、「配列」「静的ローカル (旧 : モジュール)」「メモリダンプ」の
	チェックをついた状態にした。
・「ソート」ボタンを削除し、常にソートするようにした。
・変数リストをリストボックスに取得するに際し、一旦 CVarnameList クラスに変数
	名を追加し、それの反復子を用いるようにした。
	@ 属するモジュールごとに変数を分別するため。
・静的変数リストは、始めに1回だけ取得するようにした。
	@ 途中で変わるわけがないため。
・変数がないときに、無効な iterator を脱参照してしまっていたバグを修整した。
