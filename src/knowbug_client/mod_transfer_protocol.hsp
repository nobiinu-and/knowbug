; LICENSE: CC0-1.0 <https://creativecommons.org/publicdomain/zero/1.0/deed.ja>
; v1.0.0

#ifndef included_mod_transfer_protocol_hsp
#define included_mod_transfer_protocol_hsp

; メッセージ転送プロトコルのためのモジュール
;
; %inst
; 転送プロトコル (transfer protocol) は、
; データをメッセージのリストとして送受信するプロトコル。(仮)
; 各メッセージは以下の形式。
;
; Header-Key1: Header-Value1\r\n
; Header-Key2: Header-Value2\r\n
; \r\n
; Body
;
; メッセージは1つの Content-Length ヘッダーを含み、
; その値を Body 部分の長さ (バイト単位) とする。
;
; Content-Length 以外のヘッダーや Body の内容については特に規定しない。
;
; %note
; mod_transfer_protocol.hsp を #include すること。
#module m_transfer_protocol

#define true 1
#define false 0

#define char_lf 0x0a

#define ctype char_is_space(%1 = char) \
	((%1) == ' ' || (%1) == '\t' || (%1) == '\r' || (%1) == char_lf)

; データバッファの領域を拡張する (mod_buf.hsp を参照)
#deffunc local powerful_memexpand var buf, int min_len

	if varsize(buf) < min_len {
		memexpand buf, limit(min_len, varsize(buf) * 2)
	}
	return

; データバッファに送られてきたデータを連結する
;
; %prm
; var buf: データを連結する先の変数
; var buf_len: buf の長さが格納されている変数
; var chunk: 連結されるデータが格納されている変数
; int chunk_len: 連結されるデータの長さ (バイト単位)
;
; %inst
; 変数 buf の位置 buf_len に、変数 chunk の前から chunk_len バイトのデータを書き込む。
; 書き込まれたデータの長さ分、buf_len の値が増加する。
;
; buf の領域が足りない場合は、自動で拡張される。
#deffunc transfer_protocol_append var buf, var buf_len, var chunk, int chunk_len, \
	local buf_cap

	assert buf_len >= 0
	assert chunk_len >= 0

	if chunk_len <= 0 {
		return
	}

	powerful_memexpand buf, buf_len + chunk_len

	memcpy buf, chunk, chunk_len, buf_len

	buf_len += chunk_len
	return

; データバッファにメッセージヘッダーを書き込む
;
; %prm
; int body_len: body 部分の長さ (バイト単位)
; var buf: データを格納する先の変数
;
; %inst
; 変数 buf に、body 部分の長さが body_len であるメッセージのヘッダー部分を書き込む。
#deffunc transfer_protocol_write_header int body_len, var buf

	buf = "Content-Length: " + body_len + "\n\n"
	return

; データバッファからメッセージを取り出す
;
; %prm
; buf, buf_len, body, body_len
;
; var buf: メッセージのリストが格納されている配列変数
; var buf_len: buf の長さ (バイト数) を持つ変数
; array body: メッセージの body 部分を格納する先の配列変数
; var body_len: body の長さを格納する先の変数
;
; stat: メッセージを取り出したら true
;
; %inst
; buf に書き込まれているメッセージを1つ取り出して、その body 部分を変数 body に書き込む。
;
; 取り出されたメッセージは buf から取り除かれる。
; buf が変更された場合、buf_len の値も適切に変更される。
#deffunc transfer_protocol_parse var buf, var buf_len, var body, var body_len, \
	local index, local has_body, local line_len, \
	local header_line, local header_key, local header_value

	body = ""
	body_len = 0

	index = instr(buf, 0, "Content-Length")
	if index < 0 {
		return false
	}

	repeat
		if index >= buf_len {
			break
		}

		line_len = instr(buf, index, "\n")
		if line_len <= 0 {
			has_body = line_len == 0
			break
		}

		header_line = strmid(buf, index, line_len)
		split header_line, ":", header_key, header_value

		if strtrim(header_key) == "Content-Length" {
			body_len = int(strtrim(header_value))
		}

		index += line_len + 2
	loop

	if has_body == false {
		; ヘッダーの途中までしかデータが来ていないとき
		return false
	}

	index += 2

	if index + body_len > buf_len {
		; ボディーの途中までしかデータが来ていないとき
		return false
	}

	; ボディーを複写する。
	powerful_memexpand body, body_len + 1
	memcpy body, buf, body_len, 0, index
	poke body, body_len, 0

	index += body_len

	; 残りのデータを前方に詰める。
	buf_len -= index
	if buf_len > 0 {
		memcpy buf, buf, buf_len, 0, index
		poke buf, buf_len, 0
	}

	return true

#global

#endif
