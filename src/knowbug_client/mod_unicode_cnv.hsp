// 文字列エンコーディングの Unicode との相互変換。(Win32 API 使用)
// LICENSE: PUBLIC DOMAIN

#ifndef included_mod_unicode_cnv_hsp
#define included_mod_unicode_cnv_hsp

#module m_unicode_cnv

#uselib "kernel32.dll"
#func MultiByteToWideChar "MultiByteToWideChar" sptr, sptr, sptr, sptr, sptr, sptr
#func WideCharToMultiByte "WideCharToMultiByte" sptr, sptr, sptr, sptr, sptr, sptr, sptr, sptr

#define true 1
#define false 0

#define NULL 0
#define CP_SJIS 932
#define CP_UTF8 65001

// HSP ランタイムの既定のエンコーディングを検出する。
#ifdef __hsp64__@
	#ifdef __hspver__ < 0x3600
		#define CP_HSP CP_SJIS
	#else
		#define CP_HSP CP_UTF8
	#endif
#else
	#ifdef __hsp3utf__@
		#define CP_HSP CP_UTF8
	#else
		#define CP_HSP CP_SJIS
	#endif
#endif

// 特定のコードページのマルチバイト文字列を Unicode に変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_from_multibyte int cp, var mb_str, int mb_len, var os_str, var os_len, \
	local size

	os_str = ""

	assert mb_len >= 0
	if mb_len == 0 {
		wpoke os_str, 0, 0
		os_len = 0
		return true
	}

	MultiByteToWideChar cp, 0, varptr(mb_str), mb_len, NULL, 0
	size = stat
	if size == 0 {
		wpoke os_str, 0, 0
		os_len = 0
		return false
	}
	assert size >= 1

	os_len = size
	memexpand os_str, os_len * 2 + 2

	MultiByteToWideChar cp, 0, varptr(mb_str), mb_len, varptr(os_str), size
	size = stat
	if size == 0 {
		wpoke os_str, 0, 0
		os_len = 0
		return false
	}
	assert size == os_len

	wpoke os_str, os_len * 2, 0
	return true

// Unicode 文字列を特定のコードページのマルチバイト文字列に変換する。
// 結果は NULL 終端される。
// 成功すると stat=true になる。
// 参考: <https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte>
#deffunc unicode_cnv_to_multibyte int cp, var os_str, int os_len, var mb_str, var mb_len, \
	local size

	mb_str = ""

	assert os_len >= 0
	if os_len == 0 {
		mb_len = 0
		return true
	}

	WideCharToMultiByte cp, 0, varptr(os_str), os_len, NULL, 0, NULL, NULL
	size = stat
	if size == 0 {
		mb_len = 0
		return false
	}
	assert size >= 1

	mb_len = size

	memexpand mb_str, size

	WideCharToMultiByte cp, 0, varptr(os_str), os_len, varptr(mb_str), size, NULL, NULL
	size = stat
	if size == 0 {
		mb_len = 0
		return false
	}
	assert size == mb_len

	poke mb_str, mb_len, 0
	return true

// shift_jis 文字列を Unicode に変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_from_sjis var sjis_str, int sjis_len, var os_str, var os_len

	unicode_cnv_from_multibyte CP_SJIS, sjis_str, sjis_len, os_str, os_len
	return stat

// Unicode 文字列を shift_jis に変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_to_sjis var os_str, int os_len, var sjis_str, var sjis_len

	unicode_cnv_to_multibyte CP_SJIS, os_str, os_len, sjis_str, sjis_len
	return stat

// UTF-8 文字列を Unicode に変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_from_utf8 var utf8_str, int utf8_len, var os_str, var os_len

	unicode_cnv_from_multibyte CP_UTF8, utf8_str, utf8_len, os_str, os_len
	return stat

// Unicode 文字列を UTF-8 に変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_to_utf8 var os_str, int os_len, var utf8_str, var utf8_len

	unicode_cnv_to_multibyte CP_UTF8, os_str, os_len, utf8_str, utf8_len
	return stat

// HSP ランタイムの既定のエンコーディングの文字列を Unicode に変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_from_hsp var mb_str, int mb_len, var os_str, var os_len

	unicode_cnv_from_multibyte CP_HSP, mb_str, mb_len, os_str, os_len
	return stat

// Unicode 文字列を HSP ランタイムの既定のエンコーディングに変換する。
// 変換結果は NULL 終端される。
// 成功すると stat=true になる。
#deffunc unicode_cnv_to_hsp var os_str, int os_len, var mb_str, var mb_len

	unicode_cnv_to_multibyte CP_HSP, os_str, os_len, mb_str, mb_len
	return stat

#global

#endif
