; LICENSE: CC0-1.0 <https://creativecommons.org/publicdomain/zero/1.0/deed.ja>

#ifndef included_mod_stdout_hsp
#define included_mod_stdout_hsp

#include "kernel32.as"

; 標準出力操作モジュール
;
; %note
; Win32 API を使用するため、Windows 上でのみ動作する。
#module m_stdout

#define true 1
#define false 0

#define NULL                            0
#define INVALID_HANDLE_VALUE            (-1)
#define STD_OUTPUT_HANDLE               (-11)

; 標準出力モジュールを初期化する
;
; %prm
; stat: 成功したら true
#deffunc stdout_init

	if s_stdout_handle {
		return true
	}

	GetStdHandle STD_OUTPUT_HANDLE
	s_stdout_handle = stat

	if s_stdout_handle != INVALID_HANDLE_VALUE && s_stdout_handle != NULL {
		return true
	}

	logmes "標準出力のハンドルを取得できません。"
	s_stdout_handle = 0
	return false

; 標準出力にデータを書き込む
;
; %prm
; data, data_len
;
; var data: 書き込むデータが格納されている変数
; int data_len: 書き込むデータの長さ (バイト単位)
;
; stat: 書き込まれたデータの長さ (バイト単位)。失敗時はマイナス
;
; %inst
; 標準出力にデータを書き込む。
;
; NULL 文字や改行文字が付与されることはない。
#deffunc stdout_write var data, int data_len, \
	local written_len

	stdout_init
	if stat == false {
		return -1
	}

	assert data_len >= 0
	if data_len <= 0 {
		return 0
	}

	WriteFile s_stdout_handle, varptr(data), data_len, varptr(written_len), NULL
	if stat == 0 {
		GetLastError
		logmes "WriteFile error=" + stat
		return -1
	}

;	FlushFileBuffers s_stdout_handle
;	if stat == 0 {
;		GetLastError
;		logmes "FlushFileBuffers error=" + stat
;		return -1
;	}

	return written_len

; 標準出力に文字列を書き込む
;
; %prm
; text
;
; str data: 書き込む文字列
;
; stat: 書き込まれたデータの長さ (バイト単位)。失敗時はマイナス
;
; %inst
; 標準出力に文字列を書き込む。NULL 文字は除く。
#deffunc stdout_write_str str text, \
	local data

	data = text
	stdout_write data, strlen(data)
	return stat

#global

#endif
