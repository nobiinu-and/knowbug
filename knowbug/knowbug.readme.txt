
	knowbug (ver: 1.0β12)
	
＠概要
	上大が拡張した HSP デバッグ・ウィンドウです。
	
	変数データ表示機能を重点的に拡張しており、標準では表示できない、
		・多次元配列の2,3次元目
		・モジュール変数のメンバ
		・呼び出されたユーザ定義命令に与えられた実引数
	などを見ることができます。
	
	他にも、int の16進数併記など、地味に便利な部分も。
	
	レジストリは使用しません。
	
＠導入方法
・knowbug
	
	まず、HSPのフォルダ(*)にある「hsp3debug.dll」をバックアップします。
	ファイルの名前を変更し、「hsp3debug_default.dll」などにするのがよいでしょう。
	
	次に、同梱されている「hsp3debug_knowbug.dll」の名前を「hsp3debug.dll」に変え、
	先ほどの(HSPの)フォルダにコピーします。
	
	*「HSPのフォルダ」
		HSPがインストールされているフォルダで、「common」フォルダの1つ上です。
		通常は「C:/Program Files/hsp33」です。数字は変わるかもしれません。
	
・WrapCall
	※これは一部機能にのみ使用するので、無くても問題ありません。
	
	HSPのフォルダに同梱されている「WrapCall.hpi」をHSPのフォルダにコピーし、
	「WrapCall.as」と「userdef.as」を common フォルダに移動します。
	( 既に userdef.as を使っている方は、上書きではなく追記でお願いします。 )
	
・設定ファイル
	「knowbug.ini」
	
	特に重要でもないので、削除していただいて構いません。その場合、既定の設定を
	用いて、正常に動作するはずです。
	
	具体的な設定については、設定ファイルのコメントを参照してください。
	
＠除去方法
	「＠導入方法」と逆の操作をします。
	
	knowbug (ファイル名 hsp3debug.dll) を削除し、バックアップしておいた、元々の
	hsp3debug.dll を、元に戻します。
	
	「knowbug.ini」「WrapCall.hpi」「WrapCall.as」は不要なので削除します。
	
＠機能詳細
＊「全般」タブ
	
	内容は本家とだいたい同じです (ランタイムから供給されるもの)。
	
	win32gui版では、カレント・ポジション (pos) とカレント色 (color) も表示します。
	
＊「変数」タブ
	
	本家版とはレイアウトが異なり、画面を上下に二分して、上にツリービューが、下に
	灰色メッセージボックスがあります。後者は、本家版と同じ働きです。
	
	ツリーには、すべての静的変数の名前を、モジュールごとに分類して並べています。
	この項目を選択すると、下のボックスに、変数の内容 (変数情報) が表示されます。
	
	変数情報は、ツリー形式の文字列で表されます。基本的に本家と同じですが、配列や
	モジュール実体は、特別な方法で表示します。凡例は以下の通り：
		
		(単体: 一次元一要素)
		要素名 = 値
		
		(一次元配列)
		要素名:
			.vartype = 型名
			.length  = 要素数
			要素リスト
		
		(多次元配列)
		要素名:
			.vartype = 型名
			.format  = (要素数(1), ...) (全要素数 in total)
			要素リスト
		
		(インスタンス)
		要素名:
			[@clone]		// クローン要素にのみ表示される
			.modcls = モジュール名
			要素リスト
		
	なお、配列の四次元目は、諸事情により表示できません。
	
	モジュール名のノード(「@...」)自体を選択すると、そのモジュールが持つすべての
	静的変数の値を、簡単に表示します。
	
		(モジュール)
		[@モジュール名]
		変数名	= 値
		...
	
	＃＃
	
	ルートに位置する「+sysvar」ノードの直下には、システム変数の項が存在します。
	以下は特殊な形式で表示されます：
	
		(cnt)
		#n = ...
		#m = ...
		
	一番上にあるのが、最外周ループの cnt です。#n の n は looplev となります。
	また、(out of loop) は「repeat の外なので cnt が存在しない」を意味します。
		
		(params)
		iparam = ...
		wparam = ...
		lparam = ...
		
	似たようなシステム変数なので、これらは仮想システム変数 params として、
	3つ同時に表示されます。
		
		(notebuf)
		[notebuf] (PVal*[APTR])
		...
		
	notepad 命令群に設定されたバッファを表示します。
	@ 指定された変数名を表示するのは難しいです。
	
	「+sysvar」ノードを選択すると、すべてのシステム変数の値が簡単に表示されます。
	扱いはモジュールと同じです。
	
	＃＃
	
	WrapCall 対応版を使用している場合、ルートに「+dynamic」ノードが存在します。
	この直下には、呼び出されているユーザ定義命令・関数のリストがあります。
	それらを選択すると、以下の形式で、実引数を表示します：
	
		関数名：命令または関数の名前
		仮引数：(仮引数タイプ, ...)
			(0) = 第一引数の値
			(1) = 第ニ引数の値
			...
	
	「次行」「停止」ボタンを利用したステップ実行の途中に見ることができます。
	仮引数の名前は、実行時に失われているので、表示できません。
	
	＃＃
	
	なお、本家版にあるチェックボックス (ソート, モジュール, 配列, メモリダンプ)
	は、すべて on の状態です。
	
・変数情報
	
	変数名: 変数の名前です。モジュールの中にある変数も、完全な名前で表示します。
	変数型: 変数の型です。
	配列 (x, y, z):
		配列の形を表します。x, y, z はそれぞれ、1次元目、2次元目、3次元目の
		要素数です。存在しない次元の要素数は 0 と表示します。
		配列になっていない変数は (1, 0, 0) です。
	モード:
		dup, dupptr などを受けた、いわゆるクローン変数のとき「クローン(clone)」
		と表示します。
		通常は「実体(instance)」となっています。
	アドレス:
		2つの8桁の16進数で表します。
		前者は、変数の実体データがあるメモリのアドレスで、
		後者は、変数のマスターデータがあるメモリのアドレスです。
		@ PVal::pt, PVal::master のこと。
	サイズ:
		"using X of Y [byte]" の形式で表します。
		Y は実体データが「確保」しているメモリサイズ [byte] で、
		X はそのうち、使用している部分のサイズです。
		
＊「ログ」タブ
	
	* 等角フォントを用いています (開発者の好み)。
		@ "ＭＳ ゴシック", 9[pt]
	
	* 自動更新チェックボックス
		これを外すと、logmes 命令が実行されても、一時的にログが更新されません。
		@ 更新はかなり時間の掛かる処理です。たくさんの出力がある場合は、これを
			off にした方が高速になります。
		
	* 呼出履歴チェックボックス
		これを付けると、ユーザ定義命令・関数の呼び出しと終了が logmes されます。
		@ WrapCall が必要です。
		
	* 「更新」ボタン
		ログを最新の状態に更新します。
		@ 自動更新していないときにのみ有効です。
		
	* 「保存」ボタン
		ログをファイルに保存します。
		
	* 「初期化」ボタン
		ログを初期化します。
		
＊実行制御
	
	通常の「実行」「次行」「停止」ボタンの横に、加えて「次飛」「脱出」ボタンが
	追加されています。
	
	* 「実行」(Run)
		assert 命令などで停止していた実行を再開します。
		
	* 「次行」(Step In)
		次の命令を1つ実行して、再び停止します。
		
	* 「停止」(Stop)
		実行を停止します。
		
	* 「次飛」(Step Over)
		「次行」と同様に次の命令を実行しますが、それがユーザ定義命令・関数である
		場合は、その内部の実行が終了してから停止します。
		
		(例)
			// ユーザ定義命令 test1, test2 があるとして
			assert
			test1	// ←今ここ！ (assert で停止した)
			test2
			
			ここで「次飛」を使うと、
			
			test1	// test1 の実行が完了する
			test2	// ←今ここ！ (test2 の実行直前で停止する)
			
			となる。
		
		※これを押した後、マウスを動かすなどして、デバッグウィンドウにメッセージ
		　を送らないと実行位置の表示が更新されません。これはバグですが、致命的で
		　はないので放置しました (対策案どころか原因も見当たらず困惑中)。
		
		@ 「次行」→「脱出」に等しい。
		@ なお、「次飛」では分かりづらいので、別案を募集しています。
		
	* 「脱出」(Step Out)
		次の return まで実行します。ユーザ定義命令・関数の定義の中で使用すると、
		その命令が終了するところまで実行します。
		(例)
			test1
			mes "hello"
			
			#deffunc test1
				assert
				mes "process"	// ←今ここ！ (assert で停止した)
				a = 1
				test2
				return
				
			ここで「脱出」を使うと、
			
			test1			// test1 の実行が完了する
			mes "hello"		// ←今ここ！
			
			となる。
			
		※「次飛」と同様のバグが存在します。
		
＊ ini ファイルについて
	同梱した knowbug.ini を knowbug と同じ部分に置き、それを編集すると、設定を
	カスタマイズできます。
	どれも既定でよさそうなものです。
	
	・ログのタブ文字幅 (既定：4)
	・最前面か否かの既定 (既定：false)
		右クリックで変更しても、こっちは変更されない。
	・変数ツリーのカスタムドロー (既定：false)
		変数名を、変数の型によって色分けする。
		色は COLORREF: (R, G, B) → (B << 16 | G << 8 | R) の値で設定。
		見づらい上に重いので非推奨＆隠し設定。
	・変数情報の最大文字量 (既定：0xFFFF)
	・ログの自動保存 (既定："")
		ファイルパスを指定すると、終了時に自動的に上書き保存する。
	・ログの最大文字量 (既定：0x20000)
	・右端で折り返すか否か
	
＠開発環境
	OS : Windows 7 HomeEdition
	IDE: Visual C++ 2012 Express Edition
	Lng: C++
	
＠動作環境
	HSP: 3.3β 以降
	OS : Windows 7
	
	@ これら以外では、動作を確認していません。サポートできない可能性も高いのでご了承ください。
	@ Windows のバージョンの違いにより、問題が起きる可能性があります。
	
＠著作権
	knowbug は、公式のデバッガ hsp3debug.dll に、上大が手を加えたものです。
	
	本ソフトの半分程度は、OpenHSP にあるコード、およびリソースを使用しています。
		(/trunk/tools/win32/hsp3debug/*)
	
	その著作権表示は、以下の通りです：
		Copyright (C) 1997-2011, Onion Software/onitama.
		All rights reserved.
	また、Lisense フォルダの中身も参考にしてください。
	
＠ソースコード
	上大が作成した部分は、ご自由にお使いください。ぐっちゃぐちゃです。
	他は、ライセンスに従ってください。
	
＠参照
	・プログラ広場
		[http://prograpark.ninja-web.net/]
		上大とかーみのサイトです。バグ報告、意見、感想、要望などは、ここの掲示板
		までお願いします。また、最新版は、ここの「たまり場」にあります。
		
	・HSPTV!
		[http://hsp.tv/]
		HSPの公式サイトです。
		
	・OpenHSP
		[http://dev.onionsoft.net/trac/]
		プロジェクト OpenHSP のリポジトリがあるサイトです。
		HSPはここで開発されています。
		
--------------------------------------------------------------------------------
＠メモ
	すごく個人的なメモ。
	
・Wishlist
	・ツリーのモジュール項目をクリックしたとき、ddwTree のように表示する。
		@ 不要説
		→ リストビューではないが似たようなことをした。
	・array[str]型を、要素ごとにメモリダンプしたい。
		@ ごちゃごちゃしすぎて見づらい。
	・ginfo に対応。
		@ アクティブなウィンドウの ginfo を、すべて表示 (CVarinfoTreeを拡張)。
		@ めんどくｓ
	・変数やログの文字列の縦断検索。
		@ 検索窓が設置できないとかなんとか。
	・ログのフォントの ini での指定
		@ フォントオブジェクトめんどくさい。
	・変数の値の書き換え
		str, double, int の定数に限る
		struct, prmstack の内部にも侵入したい
			どうやって対象を選択するか？
		専用の Editor ダイアログを制作する？
	・vector<ModcmdCallInfo> が WrapCall と knowbug の2箇所にあるので
			後者を前者への参照にしたい。
	
・挫折
	・CVarinfoText と CVarinfoTree の統合。
		@ref: 2010.02/07
	・comobj, variant の拡張表示。
		そもそも中身がわからないｗ
	・イミディエイト実行→無理ぽ。
		実行時データをコンパイラに教える方法が無い (作るのはめんどくさい)。
	
・その他
	・32bit 環境でのみ動作確認 (新版)。
	・デバッグ文字列の生成を HspVarProc に任せると、ランタイム側がデバッグ時に使用できるという利点がある。
	・なぜか Debug でビルドすると、Release でビルドした clhsp の vector の内容を読み取れない。
	・Release::Build Event::Post Build
		Command Line:
			copy $(TargetPath) ..\..\..\hsp3\win32\release\
			copy $(TargetPath) ..\..\..\hsp3\win32gui\release\
	・name という変数が、ノードの文字列なのか、変数やシステム変数の名前なのかが曖昧。
	・コピペプログラミングやめろ
	・ユーザ定義関数が入れ子になっている(ユーザ定義関数の引数式にユーザ定義関数が含まれる)とき：
		A( B() ):
			-reffunc_custom(A)
				-ラッパー処理：OnBeginCalling(A)
					Aのノードが追加される
				-引数を取り出す：スタックに領域を積み、expandstructを呼ぶ。
					-reffunc_custom(B)
						-ラッパー処理：OnBeginCalling(B)
							Bのノードを追加する
						-引数を取り出す
							Bの引数が処理される
						-prmstack, sublev を書き換え、移動する。
							Bの実行を行う。
							returnする
						-prmstack, sublev を戻す。
						-終了
						-ラッパー処理：OnEndCalling(B)
							Bのノードを削除する
				-prmstack, sublev を書き換え、移動する。
					Aの実行を行う。
					returnする
				-prmstack, sublev を戻す。
				-終了
				-ラッパー処理：OnEndCalling(A)
					Aのノードを削除する
		A, B の順でノードが積まれているとき、A( B() ) なのか、A() の実行中に B() が生じたのか判断する必要がある。複数の入れ子 A( B(), C() ) は特に考慮する必要はない。
		入れ子状態の場合、prmstack, sublev に変更が生じるのは、B() の実行の後、つまり危険な観測の前である。
		呼び出し A の引数にアクセス可能であるための条件は：
			0. A が最後のノードである。
				引数式にユーザ定義関数 B() が存在しないならば、A の引数の処理中に assert などで停止するタイミングは存在しない。
		または
			1. A.sublev < B.sublev  (X.sublev: X の処理直前の sublev)
				入れ子状態のときは A.sublev == B.sublev となる。
		となる。
		ついでに、呼び出し A の prmstack は、A がアクセス可能ならば
			A が最後のノードなら ctx->prmstack
			そうでなければ次のノード B の B.prmstk
		そうでなければ存在しない。
		# ややこしく考えすぎた結果がこれだよ！
		
＠履歴
	todo
	
2012.09/13
	・リリース (ver: 1.0β12)
	
2012.09/12
	・返値ノードの機能を使うか否かを設定できるようにした。
	・runmode でステップ実行中か否かを判断することができないことが判明した。
		どちらにせよ OnBgnCalling, OnEndCalling を通るときの runmode は
		RUNMODE_RUN | RUNMODE_RETURN である。
		なので、ステップ実行中か否かを示すグローバル変数 stt_bStepRunning を用いるようにした。
		@ ステップ実行中でなければ、呼び出しノードを変更しない、という仕様に使う。
		@	そのため、「次飛」「脱出」はステップ実行として扱わない。
	・返値ノードを呼び出しノードの下に追加するに際し、その呼び出しがそれに引数として依存していない場合、その下にあるすべての返値ノードを削除してから追加するようにした。
		@ 大量に溜まってしまうので。
		@ 上のバグに気づいていなかったので戸惑った。
		@	呼び出し終了後に追加しようとすると、依存していないと判定されるため。
	
2012.09/11
	・ツリー上の呼び出しノードに対して「脱出」操作をできるようにした。
		似たようなものなので「次飛」は実装していない。
	・終了時に、呼び出しノードを選択していると正常に終了できないバグを修正した。
		終了時に呼び出しノードを削除しないようにした。
		@ 削除する必要はなかったので。
		@ 「選択している呼び出しノードを削除する場合、その上を選択する」仕様に
		@	関連しているようだが、しかしなぜ正常に終了できないのかは不明。
	
2012.09/10
	・ユーザ定義関数の引数の中でユーザ定義関数が呼び出されていたときに、
		前者の引数が展開され終わる前に前者の prmstack (存在しない) に
		アクセスしようとして、間違った prmstack を参照していたバグを修正した。
	・WrapCall:
		・ModcmdCallInfo を双方向リストにした。
			元々 ModcmdCallInfo の作成・破棄は WrapCall の担当なので、
			prev, next も WrapCall 側で設定される。
		・返値が返却されたときに通知 ResultReturning を送るようにした。
			その呼び出しの OnEndCalling 通知の直前に送られる。
		・終了時に、ModcmdCallInfo をすべて破棄するようにした。
			途中で終了したとき、それらを delete することなく終了していた可能性。
			たまに死亡していたのはこのせい？
	・ユーザ定義コマンドが返値を返したときに、返値ノードを生み出すことにした。
		通常、直前の呼び出しの子ノードとして追加される。
			その親の呼び出しが終了した時に削除される。
		最初の呼び出しの返値は、+dynamic の直下に置かれる。
			これは、その次に生じた呼び出しが返値を返したときに削除される。
	・終了時に、すべての返値ノードを削除するようにした。
		関連している ResultNodeData を破棄するため。
	・OnResultReturning ではなく、OnEndCalling に処理するようにした。
		ノードを削除した後に返値ノードを生成する。
		実行モード RUN | RETURN の場合は即座に追加し、そうでなければ溜める。
		この場合、関数だけでなく、命令が返値を返却した場合も処理される。
	・呼び出し開始または終了時(OnBgnCalling, OnEndCalling)に、実行モードが
		RUNMODE_RETURN である可能性を見落としていたバグを修正した。
		@ 終了時に RUNMODE_RUN であることはなさそう。
	
2012.09/09
	・ログの最大文字量を設定できるようにした。
		エディットコントロール本来の既定値は 0x8000 、設定の既定値は 0x20000 。
	・エディットコントロールを右端で折り返すか否かを設定で変更できるようにした。
	・array 引数の文字列化に失敗していたバグを修正した。
	・リリース (ver: 1.0β11)
	
2012.09/08
	・破棄されたかもしれない一時オブジェクトを参照していたバグを修正した。
	
2012.09/07
	・ログに「更新」「保存」「初期化」機能を追加した。
	・変数情報をログに書き込めるようにした。
	・ファイルパスを設定すると、終了時に自動的にログを保存するようにした。
	・値や変数を一行に文字列化する CVarinfoLine を実装した。
		@ CVarinfoTree を“元にしている”。
		@ 悪魔と契約した。
	・変数ツリーの、モジュールや +dynamic, +sysvar での簡易表示に対応した。
		@ 各子ノードの値を一行に文字列化して表示する。
	・var 引数を array 引数として処理していたバグを修正した。
		@ 追記(09/09)：修正が中途半端だったのを再修生した。
	
2012.08/10
	・開発環境、動作環境を Windows 7 に変更した。
		@ XP に限り、重篤なバグがある場合は対応するかもしれない。
	・拡張プラグインによって提供されうる基本型の表示に対応した。
		C++に存在する型をベースにしていると予想して処理する。
			bool,
			 char  = signed_char, 
			uchar  = unsigned_char,
			 short = signed_short,
			ushort = unsigned_short,
			uint   = unsigned_int,
		
2012.05/27
	・WrapCall:
		ユーザ定義命令の返値(RUNMODE)を、knowbug が返却したものにするようにした (ただし未使用)。
	・「実行」ボタンの幅を小さく(他のボタンと同じに)した。
		@ 何故2倍の大きさを持っていたのか分からない。
	・「次飛」「脱出」ボタンを追加した。
		特定の sublev に達するまで「次行」(HSPDEBUG_STEPIN)の処理を繰り返すことで実装した。
		この2つは、その sublev の値の違いしかない (脱出は現在値 ctx->sublev の1つ上に設定される)。
		@ これらを押した後、マウスを動かすなどしてデバッグウィンドウにメッセージを送らないと、
		@	実行位置の表示が更新されないバグが残っている。原因が分からないが、致命的ではないのでとりあえず放置した。
	・リリース (ver: 1.0β8)。
		バージョン番号情報を書き換え忘れた。
	
2012.01/22
	・ini の論理値に文字列 "true", "false" を指定できるようにした。
		@ 大文字・小文字を問わない
		@ 従来通り 0, 非0 でもよい。
	・ポップアップメニューを表示するようにした。
	・最前面ウィンドウに設定できるようにした。
		@ ini の [Window] bTopMost を true にすると既定となる。
	
2011.11/16
	・呼び出しノードを削除する時、それが選択状態なら、その兄(いなければ親、則ち"+dynamic")を選択するようにした。
	・呼び出しノードは、実行中はツリーノードを追加せずに、assert で停止したときにまとめて追加するようにした。
		@ 削除は行う。
		@ wait による停止でも追加してしまうという問題がある。
		
2011.09/20
	・1024バイト以上の文字列を logmes するとバッファーオーバーフローで落ちるバグを修正した。
	
2011.08/21 (Sun)
	・モジュールメンバ関数の第一引数が、与えられた変数の要素 [0] を表示していたバグを修正した。
	
2011.07.28 (Thu)
	・multi → assoc に修正した。
	・再リリース (ver: 1.0β7)
	
2011.07.21 (Thu)
	・WrapCall の仕様変更に対応した。
		ユーザ定義コマンドの呼び出し開始・終了を、ウィンドウメッセージではなく関数ポインタの呼び出しで
		通知するようになった。
	・リリース (ver: 1.0β7)
	
2011.07.18 (Mon)
	・var_vector.hpi の拡張表示に対応した。
	
2011.06.23 (Thu)
	・仮想システム変数 notebuf を追加した。notepad 命令群に設定されたバッファを表示する。
	・システム変数の値を表す文字列を CVarinfoTree で作成するようにした。
	
2011.06/22 (Wed)
	・変数情報部分の書式を変更した (http://twitpic.com/5f3ye7)。
	・変数データやログの、タブ文字幅を指定できるようにした。
		@ [Interface] tabwidth = 4 (default)
	・変数データ文字列の字下げ(indent)を "    " ではなく "\t" でするようにした。
	・システム変数 iparam, wparam, lparam を params として1つのページで表示するようにした。
	
2011.06/21 (Tue)
	・var_multi.hpi の拡張表示に対応した。
	・静的でない変数が、要素数1でも単体変数(Scalar)ではなく、配列(Vector)として扱われていた不具合を修正した。
	
2011 06/13 (Mon)
	・呼び出し終了時に削除するツリーノードが、最後のではなく2番目のノードになっていたバグを修正した。
		for 文で TreeView_GetNextSibling() を複数回使おうとしたが、実際は初期化にしか書いていなかったという酷いミス。
	・再リリース (ver: 1.0β5)
	
2011 03/29 (Tue)
	・WrapCall.hpi との連携に対応。
		+Dynamic ノードで、呼び出されたユーザ定義命令・関数の引数の値を表示できるようにした。
		呼び出し履歴を logmes 出来るようにした。
	・リリース (ver: 1.0β5)
	
2010 02/07 (Sun), 〃/08 (Mon)
	・Visitor パターンを利用した方法に変更しようとしたが、無理だった。
		@ 残骸 → new_knowbug フォルダ
		
2010 02/06 (Sat)
	・「@a@s」と「@b@s」など、領域内に領域があるとき、それらの関係を逆に解釈して
		しまうバグを修正した。
		@ex: 同じ例で：
			-@
				-@a
					-@s
				-@b
					-@s
			正しくは：
			-@				// @
				-@s			// @s
					-@a		// @a@s
					-@b		// @b@s
	
2010 01/13 (Wed)
	・カスタムドローするかどうかを、ini ファイルで設定できるようにした。
		@ [ColorType]::bCustomDraw キーが真ならカスタムドローする。
	・全般タブのリストに要素を追加するコードを、若干すっきりさせた。
	・配列の aptr が 0x8000 以上のとき、符号が負に変わって、メモリ違反を起こし、
		異常終了してしまうバグを、hsp モードでのみ修正した。
		@ PVal::offset が signed short 扱いになっていたため。
	・hsp モードでは、ちゃんと、 hsp 本来のヘッダを用いるようにした。
		@ ただし、clhsp での定義が複数の場所に散らばってしまう。
		@ 配列の四次元目を表示できるようになったが、需要がなさそうなので変更なし。
	・hsp モードで、thismod を、引数に指定された要素だけ表示するようにした。
	・リリース (ver: 1.0β4)
		
2010 01/11 (Mon)
	・再コンパイル。
	
2010 01/02 (Sat)
	・システム変数 err を表示するようにした。
	・Vector要素 VecElem を表示する際に、実体要素なら *、参照要素なら & を、
		要素名 ( 通常は [n] ) の後に付けるようにした。
	・VecElemが参照要素で、aptr != 0 のとき、その要素の値のみを varScalar として
		取り出すようにした。
	
2009 12/19 (Sat)
	・Vectorの仕様変更に対応し、再ビルドした。
	・変数データツリーが300以上の深さになると、エラーで再帰を終了するようにした。
	・変数データツリーが長すぎると ( 0x5000 bytes 以上 )、途中で切るようにした。
	
2009 12/18 (Fri)
	・iniファイルを、ランタイムと同じフォルダから探すようにした。
		@ スクリプトエディタがカレントディレクトリを変更してしまうため、
			カレントから探すと発見できない可能性が高い。
	・カスタムドローで、NM_PREPAINT などの戻り値を、SetWindowLong() を用いて返す
		ようにした。
		@ return では返すことができないため、NM_PREPAINT が発生しなかった。
	・変数ツリーで、型ごとに色を変えるようにした。
	・(ver: 1.0β3)
	
2009 12/17 (Thu)
	・ツリービューをカスタムドローするようにしようとした。
	・iniファイルからの読み込みができるようにした。
	
2009 12/16 (Wed)
	・cntを表示するに際し、配列のように、トップレベルではないループの cnt 値も
		表示するようにした。
		「#n」は looplev が n である位置の cnt を表す。最上段がトップ。
	・「マルチスレッド Dll (/MD)」から「マルチスレッド (/MT)」に変更した。
		@ Windows XP sp2 以前の環境でも動くようになった。
	・リリース (ver: 1.0β2)
	
2009 12/15 (Tue)
	・Kernel32.dll に EncodePointer() がない環境でエラーが起きるVS2010のバグに
		対応するため、ビルドは VC++2008Ex で行うようにした。
	・リリース (ver: 1.0β1)
	・バッファサイズは、メモリダンプ時に表示するようにした。
	・システム変数を、ツリーの「$sysvar」ノードに持たせるように、追加した。
	・ツリーのトップレベルのノードはすべて開いた状態にするようにした。
	
2009 12/14 (Mon)
	・log-Editboxが更新されても、選択状態を維持するようにした。
	・log-Editboxの自動更新を止めるために、自動更新の有無をチェックボックスで
		管理し、自動更新が無効化された状態で TabLogAdd された文字列は、一旦、
		別のバッファに書きためるようにした。
	・hsp互換モードでは、配列の添字括弧に [] ではなく () を用いるようにした。
	・初リリース (ver: 1.0β0)
		HSPTV! 掲示板で宣伝した：http://hsp.tv/play/pforum.php?mode=pastwch&num=29264
	
2009 12/13 (Sun)
	・Compile-Switchで、hsp向けのバージョンとして作成できるようにした。
		@ clhsp 限定の機能は、clhsp マクロがないと制御される。
	・多次元配列の全要素が表示できるようにした。ただし、諸事情により3次元に限る。
	・nullmod を表示するときに、NULL参照エラーが発生していたバグを修正した。
	・hsp互換モードで、struct型の内容 (FlexValue) を拡張表示するようにした。
	・バージョン情報を埋め込むようにした。
	・delmod された後の FlexValue の ptr が NULL になっていない可能性があるのを
		考慮して、type が FLEXVAL_TYPE_NONE でないことも条件にした。
		@ 無効ポインタの参照でエラーが起きていた。
	・変数データテキストが 0x2000 バイトより大きければ、malloc で必要なだけ確保
		して対応するようにした。
	
2009 12/12 (Sat)
	・変数の内容のツリー形式文字列を、関数ではなく CVarinfoTree クラスが生成する
		ようにした。
	・マクロ USE_DEFAULT_ARG がないために、STRUCTPRM の大きさがビルド時と違って
		いたバグを修正した。
	・modinst のメンバを拡張表示するようにした。
	・変数の内容は CVarinfoText クラスを用いて生成するようにした。
	・メモリダンプの表示形式を変更した。
		@ 1行に 16 バイト分表示するなど、ddw に似せた。
	・変数データテキストを、項目をＷクリックしたり、リターンキー ( [Enter] ) を
		押したりしても更新するようにした。
	・logmes されても変数ツリーを構築し直さないようにした。
	
2009 12/10 (Thu)
	・vector ツリーで、「=」の左辺に「変数名[a][b]...[n]」ではなく「[n]」とだけ
		表示するようにした。
		また、.vartype で型名を表示するようにした。
	・vector が空の時の表記を変更した。
	
2009 12/09 (Wed)
	・HSP3DEBUG::dbg_toString() を追加した。
	・変数の内容 (varinf) を、knowbug が処理して表示するようにした。
		@ つまり、HSP3DEBUG::dbg_getvarinf() を呼ばないようになった。
	・vectorをツリー形式の文字列で表示するようにした。
	
2009 12/07 (Mon)
	・別フォルダに移動し、knowbug に改名した。
	・静的変数リストを、木構造の CVarTree クラスで管理するようにした。
	・「変数」タブのチェックボックスを削除し、「配列」「静的ローカル」
		「メモリダンプ」などを常に行うようにした。
	・変数リストをツリービューで表示するようにした。
	
2009 12/06 (Sun)
	・開発開始。
	・EditControl のフォントを「MS UI Gothic」から「ＭＳ ゴシック」に変更した。
	・タブのページを、限界まで広く使うようにした。
	・初期状態で、「配列」「静的ローカル (旧 : モジュール)」「メモリダンプ」の
		チェックをついた状態にした。
	・「ソート」ボタンを削除し、常にソートするようにした。
	・変数リストをリストボックスに取得するに際し、一旦 CVarnameList クラスに変数
		名を追加し、それの反復子を用いるようにした。
		@ 属するモジュールごとに変数を分別するため。
	・静的変数リストは、始めに1回だけ取得するようにした。
		@ 途中で変わるわけがないため。
	・変数がないときに、無効な iterator を脱参照してしまっていたバグを修整した。
	